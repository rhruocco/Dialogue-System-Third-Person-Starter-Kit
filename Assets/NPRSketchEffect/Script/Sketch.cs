using UnityEngine;public class Sketch : MonoBehaviour{	[Header("Parameters")]	public Material m_MatSketch;	public Color m_SketchColor = Color.black;	public Color m_OutlineColor = Color.black;	[Range(0f, 0.1f)] public float m_OutlineWidth = 0.06f;	[Range(0f, 1f)] public float m_ExpandFactor = 1f;	public int m_StencilRef = 1;	[Header("Internal")]	public Renderer m_Rd;	public Material[] m_BackupMaterials;	int m_ID_SketchColor = 0;	int m_ID_OutlineColor = 0;	int m_ID_OutlineWidth = 0;	int m_ID_ExpandFactor = 0;	int m_ID_MainTex = 0;		public void Initialize()	{		m_Rd = GetComponent<Renderer>();		m_ID_SketchColor = Shader.PropertyToID("_SketchColor");		m_ID_OutlineColor = Shader.PropertyToID("_OutlineColor");		m_ID_OutlineWidth = Shader.PropertyToID("_OutlineWidth");		m_ID_ExpandFactor = Shader.PropertyToID("_ExpandFactor");		m_ID_MainTex = Shader.PropertyToID("_MainTex");		// cache all original materials		Material[] mats = m_Rd.materials;		int len = mats.Length;		m_BackupMaterials = new Material[len];		for (int i = 0; i < len; i++)		{			m_BackupMaterials[i] = mats[i];		}	}	public void UpdateSelfParameters()	{		Material[] mats = m_Rd.materials;		for (int i = 0; i < mats.Length; i++)		{			mats[i].SetColor(m_ID_SketchColor, m_SketchColor);			mats[i].SetColor(m_ID_OutlineColor, m_OutlineColor);			mats[i].SetFloat(m_ID_OutlineWidth, m_OutlineWidth);			mats[i].SetFloat(m_ID_ExpandFactor, m_ExpandFactor);			mats[i].SetTexture(m_ID_MainTex, m_BackupMaterials[i].GetTexture(m_ID_MainTex));			mats[i].SetTextureOffset("_MainTex", m_BackupMaterials[i].GetTextureOffset("_MainTex"));			mats[i].SetTextureScale("_MainTex", m_BackupMaterials[i].GetTextureScale("_MainTex"));			mats[i].SetInt("_RefValue", m_StencilRef);		}	}	public void SetMaterialsFloat(string name, float f)	{		Material[] mats = m_Rd.materials;		for (int i = 0; i < mats.Length; i++)		{			mats[i].SetFloat(name, f);		}	}	public void SketchEnable()	{		int len = m_Rd.materials.Length;		Material[] mats = new Material[len];		for (int i = 0; i < len; i++)		{			mats[i] = m_MatSketch;		}		m_Rd.materials = mats;	}	public void SketchDisable()	{		m_Rd.materials = m_BackupMaterials;	}}